{"version":3,"sources":["components/add.edit.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["AddEditForm","inputs","moment","format","React","useState","form","setForm","className","Object","keys","map","el","Fragment","key","placeholder","toUpperCase","type","value","onChange","e","console","log","target","handleInputChange","Home","props","App","route","setRoute","style","position","marginTop","top","height","left","right","display","alignItems","justifyContent","width","margin","onClick","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6aad6357.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nconst AddEditForm = () => {\n  const date = moment().format(\"YYYY-MM-DD\")\n  const inputs = {\"date\":date, \"client\":\"\",\"qty-gram\":\"\",\"qty-kg\":\"\", \"description\":\"\", \"photos\":\"\"}\n  const [form, setForm] = React.useState(inputs);\n  const handleInputChange = (el,e)=>{\n    console.log(form, el,e)\n    setForm({...form, [el]:e.target.value})\n  }\n  return (\n    <section className=\"container\">\n      <h3 className=\"is-size-4 has-text-weight-bold p-b-md\">Known-u Data Record Form </h3>\n      <form>\n        {Object.keys(form).map((el) => (\n          <React.Fragment  key={el}>\n            {el === \"description\" ? (\n              <textarea placeholder={el.toUpperCase()} ></textarea>\n            ) : (\n              <input\n               \n                type={\n                  el === \"date\" ? \"date\" : el === \"photos\" ? \"file\" : \"text\"\n                }\n                value={form[el]}\n                placeholder={el.toUpperCase()}\n                onChange={(e)=>handleInputChange(el,e)}\n              />\n            )}\n          </React.Fragment>\n        ))}\n      </form>\n    </section>\n  );\n};\n\nexport default AddEditForm;\n","import React from \"react\";\n\nfunction Home(props) {\n  return <section>\n     <h3 className=\"is-size-4 has-text-weight-bold p-b-md\">Known-u App </h3>\n     <p className=\"is-size-6 has-text-weight-medium\">this is the born of trail app using to keep record field data please try and use. Please give feedback to developer if you have any request</p>\n  </section>;\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./style.scss\";\nimport AddEditForm from \"./components/add.edit\";\nimport Home from \"./components/home\";\n\nfunction App() {\n  const [route, setRoute] = React.useState('home')\n  return (\n    <main className=\"section\" style={{ position: \"relative\", marginTop: 50 }}>\n      <header\n        className=\"container has-background-primary\"\n        style={{\n          position: \"fixed\",\n          top: 0,\n          height: 50,\n          left: 0,\n          right: 0,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {[\"home\", \"add-new\", \"list\", \"search\"].map((el) => (\n          <p \n          key={el} \n          style={{ width: 30, height: 30 , margin:\"0 15px\"}} \n          className=\"has-text-white\" \n          onClick={()=>setRoute(el)}>\n            <img className=\"has-text-white\" src={process.env.PUBLIC_URL+ \"/icons/\" + el +\".svg\"} alt=\"\" />\n          </p>\n        ))}\n      </header>\n      <article>\n        \n        {route === \"home\" && <Home></Home>}\n        {route === \"add-new\" && <AddEditForm></AddEditForm>}\n        {route === \"list\" && <span>{route}</span>}\n        {route === \"search\" && <span>{route}</span>}\n        \n      </article>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}